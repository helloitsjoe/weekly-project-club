{"version":3,"sources":["week-01/utils.js","week-01/Chart.js","week-01/Stats.js","week-01/App.js","week-02/utils.js","week-02/services.js","week-02/App.js","week-03/utils.js","week-03/App.js","index.js"],"names":["BASIC_PRICE","DELUXE_PRICE","titleCase","str","slice","toUpperCase","toLowerCase","getRevenue","rawCupcakeData","price","today","Date","dayOfWeek","currDay","reduceRight","acc","dailyCupcakes","week","push","isLastDayOfMonth","month","getMonth","year","length","subDays","PropTypes","arrayOf","number","isRequired","Chart","data","unit","basic","deluxe","total","maxDomain","Math","max","makeChartProps","color","interpolation","style","stroke","domain","y","padding","left","right","bottom","top","invertAxis","label","dependentAxis","tickFormat","ea","axisLabel","getCurrent","arr","getLast","getAvg","round","reduce","sum","curr","StatsBlock","num","className","defaultProps","Stats","React","useState","showAvg","setShowAvg","comparisonFunc","type","onClick","p","WEEK","MONTH","YEAR","App","setUnit","showChart","setShowChart","basicRaw","deluxeRaw","totalRaw","getClass","CLEANING","FILLING","ROOT_CANAL","TYPES","isOpen","obj","mapSlots","cal","fn","Object","entries","key","slots","map","formatCalData","newData","day","slot","i","range","start","end","delta","realStart","Array","keys","makeHalfHourSlots","startHour","endHour","Error","flatMap","time","hour","ampm","makeWeeklyCal","dailySlots","mon","tues","wed","thurs","fri","markOpenSlots","open","next","prev","twoNext","twoPrev","threeOpen","sleep","ms","Promise","resolve","setTimeout","weeklyCal","text","makeRandomWeeklyCal","fetchCal","then","updateCal","timeSlot","some","option","includes","makeSlot","all","Cell","row","currentType","onMouseEnter","onSubmit","onError","status","value","replace","join","column","index","message","validateBooking","id","console","log","handleCellClick","Snackbar","submitting","useReducer","s","action","payload","calData","activeIndices","errorMessage","rowIndex","currentColId","columnId","newCal","state","dispatch","useEffect","initialCal","selectType","handleMouseEnter","handleSubmit","handleError","getActive","every","active","activeSlot","columns","accessor","concat","Header","formattedCal","useMemo","showPagination","pageSize","bodyParts","exercises","currentId","pick","floor","random","getReps","min","getNext","name","reps","getTotalReps","format","seconds","clamped","makeExerciseList","totalReps","exercisesWithReps","MAX_REPS","nextExercise","removeBoring","nameToRemove","nonBoring","filter","Clock","remove","a","secondsLeft","currentIndex","currentExercise","buttonLabel","exerciseName","interval","setInterval","clearInterval","data-testid","ex","setExercises","getReadme","weeks","readme","app","MatildasCupcakes","MarthaDentist","SweatySeth","q","window","location","search","page","substring","lastIndexOf","ReactDOM","render","currentWeek","setCurrentWeek","Main","onChange","e","target","href","document","getElementById"],"mappings":"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","file":"static/js/main.e33347d1.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { isLastDayOfMonth, subDays } from 'date-fns';\n\nexport const BASIC_PRICE = 5;\nexport const DELUXE_PRICE = 6;\n\nexport const titleCase = str => str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n\n// Creates arrays for weekly, monthly, yearly revenue.\n// Most recent revenue is at the beginning of the array.\nexport const getRevenue = (rawCupcakeData, price = 1, today = new Date()) => {\n  let dayOfWeek = 0;\n  let currDay = today;\n\n  return rawCupcakeData.reduceRight(\n    (acc, dailyCupcakes) => {\n      // Week totals (rolling full week starting with today)\n      if (dayOfWeek > 6) {\n        acc.week.push(0);\n        dayOfWeek = 0;\n      }\n\n      // Month and year totals, starts at current day of the month\n      if (isLastDayOfMonth(currDay)) {\n        acc.month.push(0);\n        if (currDay.getMonth() === 11) {\n          acc.year.push(0);\n        }\n      }\n      acc.week[acc.week.length - 1] += dailyCupcakes * price;\n      acc.month[acc.month.length - 1] += dailyCupcakes * price;\n      acc.year[acc.year.length - 1] += dailyCupcakes * price;\n\n      dayOfWeek++;\n      currDay = subDays(currDay, 1);\n      return acc;\n    },\n    {\n      week: [0],\n      month: [0],\n      year: [0],\n    }\n  );\n};\n\nexport const dataShape = {\n  basic: PropTypes.arrayOf(PropTypes.number).isRequired,\n  deluxe: PropTypes.arrayOf(PropTypes.number).isRequired,\n  total: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { VictoryChart, VictoryLine, VictoryAxis } from 'victory';\nimport { titleCase, dataShape } from './utils';\n\nfunction Chart({ data, unit }) {\n  const { basic, deluxe, total } = data;\n  const maxDomain = Math.max(...total) * 1.1;\n\n  const makeChartProps = color => ({\n    interpolation: 'natural',\n    style: { data: { stroke: color } },\n  });\n\n  return (\n    <VictoryChart\n      domain={{ y: [0, maxDomain] }}\n      padding={{ left: 60, right: 50, bottom: 50, top: 20 }}\n    >\n      <VictoryAxis invertAxis label={`${titleCase(unit)}s in the past`} />\n      <VictoryAxis\n        dependentAxis\n        tickFormat={ea => (ea > 1000 ? `${ea / 1000}k` : ea)}\n        style={{ axisLabel: { padding: 40 } }}\n        label=\"Total Cupcakes\"\n      />\n      <VictoryLine {...makeChartProps('lightblue')} data={basic} />\n      <VictoryLine {...makeChartProps('cornflowerblue')} data={deluxe} />\n      <VictoryLine {...makeChartProps('darkmagenta')} data={total} />\n    </VictoryChart>\n  );\n}\n\nChart.propTypes = {\n  data: PropTypes.shape(dataShape).isRequired,\n  unit: PropTypes.string.isRequired,\n};\n\nexport default Chart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BASIC_PRICE, DELUXE_PRICE, titleCase, dataShape } from './utils';\nimport './App.css';\n\n// Most recent revenue is at the beginning of the array.\nconst getCurrent = arr => arr[0];\nconst getLast = arr => arr[1];\n\n// Current week/month/year will drag avg down, so exclude it.\nconst getAvg = arr =>\n  Math.round(arr.slice(1).reduce((sum, curr) => sum + curr, 0) / (arr.length - 1));\n\nfunction Stats({ data, unit }) {\n  const [showAvg, setShowAvg] = React.useState(true);\n  const { basic, deluxe, total } = data;\n\n  const label = titleCase(unit);\n\n  const comparisonFunc = showAvg ? getAvg : getLast;\n\n  return (\n    <>\n      <div className=\"Cupcakes-stats\">\n        <section>\n          <h3>{showAvg ? `${label}ly Average` : `Last ${label}`}</h3>\n          <StatsBlock num={comparisonFunc(basic)} price={BASIC_PRICE} label=\"Basic cupcakes\" />\n          <StatsBlock num={comparisonFunc(deluxe)} price={DELUXE_PRICE} label=\"Deluxe cupcakes\" />\n          <StatsBlock num={comparisonFunc(total)} label=\"Total revenue\" />\n        </section>\n        <section>\n          <h3>This {label}</h3>\n          <StatsBlock num={getCurrent(basic)} price={BASIC_PRICE} label=\"Basic cupcakes\" />\n          <StatsBlock num={getCurrent(deluxe)} price={DELUXE_PRICE} label=\"Deluxe cupcakes\" />\n          <StatsBlock num={getCurrent(total)} label=\"Total revenue\" />\n        </section>\n      </div>\n      <button type=\"button\" className=\"text\" onClick={() => setShowAvg(p => !p)}>\n        Compare to {showAvg ? `last ${unit}` : `${unit}ly average`}\n      </button>\n    </>\n  );\n}\n\nStats.propTypes = {\n  data: PropTypes.shape(dataShape).isRequired,\n  unit: PropTypes.string.isRequired,\n};\n\nfunction StatsBlock({ num, price, label }) {\n  return (\n    <div className=\"Cupcakes-stats--block\">\n      <p>{label}:</p>\n      <div className=\"Cupcakes-stats--container\">\n        {price ? (\n          <div>\n            <h2>{Math.round(num / price)}</h2> <h4 className=\"Cupcakes-stats--revenue\">$({num})</h4>\n          </div>\n        ) : (\n          <h2>${num}</h2>\n        )}\n      </div>\n    </div>\n  );\n}\n\nStatsBlock.propTypes = {\n  num: PropTypes.number.isRequired,\n  price: PropTypes.number,\n  label: PropTypes.string.isRequired,\n};\n\nStatsBlock.defaultProps = {\n  price: null,\n};\n\nexport default Stats;\n","import React from 'react';\nimport Chart from './Chart';\nimport Stats from './Stats';\nimport { BASIC_PRICE, DELUXE_PRICE, getRevenue } from './utils';\nimport './App.css';\n\nimport basicRaw from './resources/basic.json';\nimport deluxeRaw from './resources/deluxe.json';\nimport totalRaw from './resources/total.json';\n\nconst WEEK = 'week';\nconst MONTH = 'month';\nconst YEAR = 'year';\n\nfunction App() {\n  const [unit, setUnit] = React.useState(WEEK);\n  const [showChart, setShowChart] = React.useState(false);\n\n  const basic = getRevenue(basicRaw, BASIC_PRICE)[unit];\n  const deluxe = getRevenue(deluxeRaw, DELUXE_PRICE)[unit];\n  const total = getRevenue(totalRaw)[unit];\n\n  const data = { basic, deluxe, total };\n\n  const getClass = type => (type === unit ? 'active' : '');\n\n  return (\n    <div className=\"Cupcakes\">\n      <div className=\"Cupcakes-container\">\n        <h1 className=\"Cupcakes-head\">Matilda&apos;s Cupcakes</h1>\n        <div className=\"Cupcakes-buttons\">\n          <button type=\"button\" className={getClass(WEEK)} onClick={() => setUnit(WEEK)}>\n            Weekly\n          </button>\n          <button type=\"button\" className={getClass(MONTH)} onClick={() => setUnit(MONTH)}>\n            Monthly\n          </button>\n          <button type=\"button\" className={getClass(YEAR)} onClick={() => setUnit(YEAR)}>\n            Yearly\n          </button>\n        </div>\n        <button type=\"button\" className=\"text\" onClick={() => setShowChart(p => !p)}>\n          {showChart ? 'See stats' : 'See chart'}\n        </button>\n        <div className=\"Cupcakes-chart\">\n          {showChart ? <Chart data={data} unit={unit} /> : <Stats data={data} unit={unit} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable operator-linebreak */\nexport const SLOTS_IN_NINE_HOUR_DAY = 18;\n\nexport const CLEANING = 1;\nexport const FILLING = 2;\nexport const ROOT_CANAL = 3;\n\nexport const TYPES = {\n  [CLEANING]: 'CLEANING',\n  [FILLING]: 'FILLING',\n  [ROOT_CANAL]: 'ROOT CANAL',\n};\n\nconst isOpen = obj => !!obj && !obj.type; // coerce undefined to false\n\nexport const mapSlots = (cal, fn) =>\n  Object.entries(cal).reduce((acc, [key, slots]) => {\n    acc[key] = slots.map(fn);\n    return acc;\n  }, {});\n\nexport const formatCalData = newData => {\n  return Object.entries(newData).reduce((acc, [day, slots]) => {\n    return slots.map((slot, i) => ({\n      ...acc[i],\n      [day]: slot,\n    }));\n  }, {});\n};\n\nexport const range = (start, end) => {\n  const delta = end ? end - start : start;\n  const realStart = end ? start : 0;\n  return [...Array(delta).keys()].map(i => realStart + i);\n};\n\nconst makeHalfHourSlots = (startHour, endHour) => {\n  if (startHour > endHour) {\n    throw new Error('Start time must be before end time!');\n  }\n\n  return range(startHour, endHour).flatMap(time => {\n    const hour = time > 12 ? time - 12 : time;\n    const ampm = time >= 12 ? 'PM' : 'AM';\n    return [\n      { time: `${hour}:00 ${ampm}` },\n      { time: hour !== 2 ? `${hour}:30 ${ampm}` : 'Tooth Hurty' },\n    ];\n  });\n};\n\nexport const makeWeeklyCal = ({ startHour = 8, endHour = 17 } = {}) => {\n  const dailySlots = makeHalfHourSlots(startHour, endHour);\n\n  return {\n    mon: dailySlots.slice(),\n    tues: dailySlots.slice(),\n    wed: dailySlots.slice(),\n    thurs: dailySlots.slice(),\n    fri: dailySlots.slice(),\n  };\n};\n\nexport const makeRandomWeeklyCal = ({ startHour, endHour }) => {\n  // const getRandomSlotType = () => Math.floor(Math.random() * 8);\n  // const sparsify = type => (Math.round(Math.random()) ? 0 : type);\n\n  const weeklyCal = makeWeeklyCal({ startHour, endHour });\n  return mapSlots(weeklyCal, slot => {\n    // const type = sparsify(getRandomSlotType());\n    const type = 0;\n    return { ...slot, text: TYPES[type] || '', type, open: false };\n  });\n};\n\nexport const makeSlot = type => (type ? { type, text: TYPES[type] } : {});\n\nexport const markOpenSlots = ({ type, cal }) => {\n  if (type === CLEANING) {\n    return mapSlots(cal, slot => ({ ...slot, open: !slot.type }));\n  }\n  if (type === FILLING) {\n    return mapSlots(cal, (slot, i, arr) => {\n      const curr = arr[i];\n      const next = arr[i + 1];\n      const prev = arr[i - 1];\n      const open = !curr.type && (isOpen(next) || isOpen(prev));\n      return { ...slot, open };\n    });\n  }\n  if (type === ROOT_CANAL) {\n    return mapSlots(cal, (slot, i, arr) => {\n      const curr = arr[i];\n      const next = arr[i + 1];\n      const prev = arr[i - 1];\n      const twoNext = arr[i + 2];\n      const twoPrev = arr[i - 2];\n      const threeOpen =\n        (isOpen(next) && isOpen(prev)) ||\n        (!isOpen(next) && isOpen(prev) && isOpen(twoPrev)) ||\n        (!isOpen(prev) && isOpen(next) && isOpen(twoNext));\n\n      const open = !curr.type && threeOpen;\n      return { ...slot, open };\n    });\n  }\n  return null;\n};\n\nexport const validateBooking = ({ day, timeSlot, currentType, cal }) => {\n  if ([day, timeSlot, currentType, cal].some(option => option == null)) {\n    return 'Invalid booking';\n  }\n\n  if (!currentType) {\n    return 'Please select an appointment type';\n  }\n\n  if (timeSlot + currentType > cal[day].length) {\n    return 'Your entire appointment must be within work hours!';\n  }\n\n  for (let i = 0; i < currentType; i++) {\n    const slot = cal[day][timeSlot + i];\n    if (slot && slot.type > 0) {\n      return 'You must pick an empty time slot!';\n    }\n  }\n\n  return '';\n};\n","import {\n  range,\n  makeRandomWeeklyCal,\n  makeWeeklyCal,\n  makeSlot,\n  FILLING,\n  ROOT_CANAL,\n  CLEANING,\n} from './utils';\n\nconst sleep = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst startHour = 9;\nconst endHour = 17;\n\nlet cal = makeRandomWeeklyCal({ startHour, endHour });\n\n// Fake GET\nexport const fetchCal = () => sleep(500).then(() => Promise.resolve(cal));\n\n// Fake POST\nexport const updateCal = ({ day, timeSlot, type }) => {\n  if ([day, timeSlot, type].some(option => option == null)) {\n    throw new Error('Update requires day, timeSlot, and type.');\n  }\n\n  return sleep(500).then(() => {\n    cal[day] = cal[day].map((slot, i) => {\n      if (range(timeSlot, timeSlot + type).includes(i)) {\n        return { ...slot, ...makeSlot(type) };\n      }\n      return slot;\n    });\n    return cal;\n  });\n};\n\n// Reset helper for tests\nexport const resetCal = () => {\n  cal = makeWeeklyCal();\n};\n\nconst seedCalendar = () => {\n  return Promise.all([\n    updateCal({ day: 'mon', timeSlot: 0, type: FILLING }),\n    updateCal({ day: 'mon', timeSlot: 4, type: CLEANING }),\n    updateCal({ day: 'tues', timeSlot: endHour - 5, type: ROOT_CANAL }),\n    updateCal({ day: 'wed', timeSlot: 3, type: CLEANING }),\n    updateCal({ day: 'wed', timeSlot: 5, type: CLEANING }),\n    updateCal({ day: 'wed', timeSlot: 7, type: CLEANING }),\n    updateCal({ day: 'fri', timeSlot: 3, type: ROOT_CANAL }),\n    updateCal({ day: 'fri', timeSlot: endHour - 6, type: FILLING }),\n  ]);\n};\n\nseedCalendar();\n","import React, { useReducer, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from 'react-table';\nimport {\n  range,\n  TYPES,\n  FILLING,\n  CLEANING,\n  ROOT_CANAL,\n  formatCalData,\n  markOpenSlots,\n  validateBooking,\n} from './utils';\nimport 'react-table/react-table.css';\nimport './App.css';\nimport { fetchCal, updateCal } from './services';\n\nconst typesShape = PropTypes.oneOf([0, 1, 2, 3]);\nconst slotShape = { text: PropTypes.string, type: typesShape, open: PropTypes.bool };\n\nconst Cell = ({ cal, row, currentType, onMouseEnter, onSubmit, onError, status }) => {\n  const handleCellClick = ({ column, index }) => {\n    const message = validateBooking({ currentType, day: column.id, cal, timeSlot: index });\n    if (message) {\n      console.log(message || 'Your appointment is BOOKED!');\n      onError(message);\n      return;\n    }\n    onSubmit({ day: column.id, timeSlot: index, type: currentType });\n  };\n\n  const open = row.value.open ? TYPES[currentType].toLowerCase().replace(' ', '-') : 'unavailable';\n\n  return (\n    // eslint-disable-next-line\n    <div\n      className={['Table-cell', status, open].join(' ')}\n      onMouseEnter={() => onMouseEnter(row)}\n      onClick={() => handleCellClick(row)}\n    >\n      {row.value.text}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  currentType: typesShape.isRequired,\n  status: PropTypes.string.isRequired,\n  onError: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onMouseEnter: PropTypes.func.isRequired,\n  row: PropTypes.shape({ value: PropTypes.shape(slotShape) }).isRequired,\n  cal: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape(slotShape))).isRequired,\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(\n    (s, action) => {\n      const { payload } = action;\n      switch (action.type) {\n        case 'FETCH':\n          return { ...s, calData: payload };\n        case 'TYPE_SELECTED': {\n          return {\n            ...s,\n            activeIndices: [],\n            errorMessage: '',\n            currentType: payload,\n            calData: markOpenSlots({ type: payload, cal: s.calData }),\n          };\n        }\n        case 'HOVER': {\n          const activeSlots = range(s.currentType).map(ea => payload.rowIndex + ea);\n          return { ...s, activeIndices: activeSlots, currentColId: payload.columnId };\n        }\n        case 'ERROR':\n          return { ...s, errorMessage: payload };\n        case 'SUBMIT':\n          return { ...s, submitting: true, errorMessage: '' };\n        case 'SUBMIT_SUCCESS':\n          return {\n            ...s,\n            submitting: false,\n            calData: markOpenSlots({ type: s.currentType, cal: payload.newCal }),\n          };\n        default:\n          return s;\n      }\n    },\n    {\n      activeIndices: [],\n      calData: {},\n      currentType: 0,\n      currentColId: 0,\n      errorMessage: '',\n      submitting: false,\n    }\n  );\n\n  useEffect(() => {\n    fetchCal().then(initialCal => {\n      dispatch({ type: 'FETCH', payload: initialCal });\n    });\n  }, []);\n\n  const { submitting, calData, currentType, currentColId, activeIndices, errorMessage } = state;\n\n  const selectType = type => {\n    dispatch({ type: 'TYPE_SELECTED', payload: type });\n  };\n\n  const handleMouseEnter = row => {\n    dispatch({ type: 'HOVER', payload: { columnId: row.column.id, rowIndex: row.index } });\n  };\n\n  const handleSubmit = ({ day, timeSlot, type }) => {\n    dispatch({ type: 'SUBMIT' });\n    return updateCal({ day, timeSlot, type }).then(newCal => {\n      dispatch({ type: 'SUBMIT_SUCCESS', payload: { type, newCal } });\n    });\n  };\n\n  const handleError = message => {\n    dispatch({ type: 'ERROR', payload: message });\n  };\n\n  const getActive = row => {\n    if (activeIndices.includes(row.index) && currentColId === row.column.id) {\n      const activesAreEmpty = activeIndices.every(active => {\n        const activeSlot = calData[currentColId][active];\n        return activeSlot && !activeSlot.text;\n      });\n      return activesAreEmpty ? 'empty' : 'full';\n    }\n    return '';\n  };\n\n  const columns = [{ accessor: 'mon.time' }].concat(\n    Object.keys(calData).map(key => ({\n      Header: key.toUpperCase(),\n      accessor: key,\n      Cell: row => (\n        <Cell\n          status={getActive(row)}\n          onError={handleError}\n          onSubmit={handleSubmit}\n          currentType={currentType}\n          onMouseEnter={handleMouseEnter}\n          row={row}\n          cal={calData}\n        />\n      ),\n    }))\n  );\n\n  const formattedCal = useMemo(() => (Object.keys(calData).length ? formatCalData(calData) : []), [\n    calData,\n  ]);\n\n  return (\n    <div className=\"Dentist\">\n      <h1 className=\"Dentist-head\">Martha&apos;s Dentapalooza</h1>\n      <h2 className=\"Dentist-subhead\">Schedule for Next Week:</h2>\n      <div className=\"error-space\">{errorMessage && <Error message={errorMessage} />}</div>\n      <div className=\"Dentist-container\">\n        <div className=\"Dentist-buttons\">\n          <span>Appointment Types:</span>\n          <button\n            type=\"button\"\n            className=\"Dentist-btn cleaning\"\n            onClick={() => selectType(CLEANING)}\n          >\n            Cleaning Slots\n          </button>\n          <button type=\"button\" className=\"Dentist-btn filling\" onClick={() => selectType(FILLING)}>\n            Filling Slots\n          </button>\n          <button\n            type=\"button\"\n            className=\"Dentist-btn root-canal\"\n            onClick={() => selectType(ROOT_CANAL)}\n          >\n            Root canal Slots\n          </button>\n        </div>\n        <div className=\"Dentist-table\">\n          <Table\n            data={formattedCal}\n            columns={columns}\n            showPagination={false}\n            pageSize={formattedCal.length}\n          />\n        </div>\n      </div>\n      {(!formattedCal.length || submitting) && <Snackbar submitting={submitting} />}\n    </div>\n  );\n}\n\nconst Error = ({ message }) => <div className=\"error\">{message}</div>;\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nconst Snackbar = ({ submitting }) => (\n  <div className=\"snackbar\">{submitting ? 'Submitting...' : 'Loading...'}</div>\n);\n\nSnackbar.propTypes = {\n  submitting: PropTypes.bool,\n};\n\nSnackbar.defaultProps = {\n  submitting: false,\n};\n\nexport default App;\n","const bodyParts = [\n  'Arm',\n  'Side',\n  'Hip',\n  'Knee',\n  'Air',\n  'Leg',\n  'Neck',\n  'Bun',\n  'Elbow',\n  'Lip',\n  'Nose',\n  'Foot',\n  'Jumping',\n  'Mouth',\n  'Ab',\n  'Ear',\n];\n\nconst exercises = [\n  'Reach',\n  'Rotations',\n  'Lifts',\n  'Lunge',\n  'Squats',\n  'Raises',\n  'Swingers',\n  'Blasters',\n  'Burners',\n  'Push-Ups',\n  'Jacks',\n  'Lasers',\n  'Twisters',\n  'Crunches',\n  'Whizzers',\n];\n\n// 2 sec each rep\n// 105 reps = 3:30\nconst MAX_REPS = 105;\n// 75 reps = 2:30\nconst MIN_REPS = 95;\n\nlet currentId = 0;\n\nconst pick = arr => arr[Math.floor(Math.random() * arr.length)];\nconst getReps = (min = 10, max = 20) => Math.floor(Math.random() * (max - min + 1) + min);\nconst getNext = arr => {\n  const name = `${pick(bodyParts)} ${pick(exercises)}`;\n  if (arr.includes(name)) {\n    return getNext(arr);\n  }\n  return { name, id: currentId++, reps: getReps() };\n};\nexport const getTotalReps = arr => arr.reduce((acc, curr) => acc + curr.reps, 0);\nexport const format = seconds => {\n  const clamped = seconds < 0 ? 0 : seconds;\n  return clamped >= 10 ? `0:${clamped}` : `0:0${clamped}`;\n};\n\nexport const makeExerciseList = () => {\n  let totalReps = 0;\n  const exercisesWithReps = [];\n  while (totalReps < MAX_REPS - 20) {\n    const nextExercise = getNext(exercisesWithReps);\n    exercisesWithReps.push(nextExercise);\n    totalReps += nextExercise.reps;\n  }\n  return exercisesWithReps;\n};\n\nexport const removeBoring = (arr, nameToRemove) => {\n  const nonBoring = arr.filter(ea => ea.name !== nameToRemove);\n  if (getTotalReps(arr) < MIN_REPS) {\n    const nextExercise = getNext(arr);\n    return nonBoring.concat(nextExercise);\n  }\n  return nonBoring;\n};\n","import React, { useState, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { makeExerciseList, getTotalReps, removeBoring, format } from './utils';\n\nconst exerciseShape = { name: PropTypes.string, reps: PropTypes.number };\n\nexport function Clock({ exercises = [], remove }) {\n  const [state, dispatch] = useReducer(\n    (s, a) => {\n      switch (a.type) {\n        case 'TICK':\n          return { ...s, secondsLeft: s.secondsLeft - 1 };\n        case 'NEXT': {\n          const currentIndex = s.currentIndex + 1;\n          const currentExercise = exercises[currentIndex];\n          if (!currentExercise) {\n            return { buttonLabel: 'Next', exerciseName: 'Done!', seconds: null };\n          }\n          return {\n            ...s,\n            currentIndex,\n            buttonLabel: 'Next',\n            exerciseName: currentExercise.name,\n            secondsLeft: currentExercise.reps * 2,\n          };\n        }\n        default:\n          return s;\n      }\n    },\n    {\n      currentIndex: -1,\n      secondsLeft: null,\n      buttonLabel: 'Start',\n      exerciseName: '',\n    }\n  );\n\n  const { currentIndex, secondsLeft, buttonLabel, exerciseName } = state;\n\n  const startNext = () => dispatch({ type: 'NEXT' });\n\n  useEffect(\n    () => {\n      if (currentIndex < 0) return;\n\n      const interval = setInterval(() => {\n        dispatch({ type: secondsLeft ? 'TICK' : 'NEXT' });\n      }, 1000);\n      // eslint-disable-next-line consistent-return\n      return () => clearInterval(interval);\n    },\n    [secondsLeft, currentIndex]\n  );\n\n  return (\n    <>\n      <div className=\"Workout-current\">\n        <button\n          type=\"button\"\n          onClick={startNext}\n          data-testid=\"action-button\"\n          className=\"Workout-btn--action\"\n        >\n          {buttonLabel}\n        </button>\n        <h2 data-testid=\"current-exercise\">\n          {currentIndex >= 0 && `${currentIndex + 1}. `}\n          {exerciseName}\n        </h2>\n        <h2 data-testid=\"time-left\">{secondsLeft != null ? format(secondsLeft) : ''}</h2>\n      </div>\n      <div className={secondsLeft === 0 ? 'Workout-list--next' : ''}>\n        <ol start={(currentIndex || 0) + 2}>\n          {exercises.map(\n            (ex, i) =>\n              i > currentIndex && (\n                <li\n                  key={ex.id}\n                  className={\n                    secondsLeft === 0 && i === currentIndex + 1 ? 'Workout-item--next' : ''\n                  }\n                >\n                  <span>\n                    {ex.name}: {ex.reps} Reps\n                  </span>\n                  <button\n                    type=\"button\"\n                    onClick={() => remove(ex.name)}\n                    className=\"Workout-btn--text boring\"\n                  >\n                    Too Boring\n                  </button>\n                </li>\n              )\n          )}\n        </ol>\n        <div>Total Reps: {getTotalReps(exercises)}</div>\n      </div>\n    </>\n  );\n}\n\nClock.propTypes = {\n  exercises: PropTypes.arrayOf(PropTypes.shape(exerciseShape)).isRequired,\n  remove: PropTypes.func.isRequired,\n};\n\nfunction App() {\n  const [exercises, setExercises] = useState(makeExerciseList());\n\n  const remove = name => setExercises(prev => removeBoring(prev, name));\n\n  return (\n    <div className=\"Workout\">\n      <div>\n        <h1 className=\"Workout-head\">Sweatin&apos; with Seth</h1>\n        <Clock remove={remove} exercises={exercises} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport MatildasCupcakes from './week-01/App';\nimport MarthaDentist from './week-02/App';\nimport SweatySeth from './week-03/App';\n\nimport './index.css';\n\nconst getReadme = week =>\n  `https://github.com/helloitsjoe/weekly-project-club/blob/master/src/week-${week}/README.md`;\n\nconst weeks = [\n  { readme: getReadme('01'), app: MatildasCupcakes },\n  { readme: getReadme('02'), app: MarthaDentist },\n  { readme: getReadme('03'), app: SweatySeth },\n];\n\n// This assumes that the last query param will be the initialIndex\nconst q = window ? window.location.search : '';\nconst page = q.substring(q.lastIndexOf('=') + 1) || weeks.length - 1;\n\nfunction App() {\n  const [currentWeek, setCurrentWeek] = useState(page);\n  const Main = weeks[currentWeek].app;\n  return (\n    <>\n      <Main />\n      <div className=\"menu\">\n        <select value={currentWeek} onChange={e => setCurrentWeek(e.target.value)} name=\"weeks\">\n          <option value={0}>Week 1: Matilda&apos;s Cupcakes</option>\n          <option value={1}>Week 2: Martha&apos;s Dentapalooza</option>\n          <option value={2}>Week 3: Sweatin&apos; with Seth</option>\n        </select>\n        <a href={weeks[currentWeek].readme}>Project Brief</a>\n      </div>\n    </>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}