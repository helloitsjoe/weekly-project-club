{"version":3,"sources":["week-01/utils.js","week-01/Chart.js","week-01/Stats.js","week-01/App.js","index.js"],"names":["BASIC_PRICE","DELUXE_PRICE","titleCase","str","slice","toUpperCase","toLowerCase","getRevenue","rawCupcakeData","price","today","Date","weekCount","currDay","reduceRight","acc","dailyCupcakes","week","push","length","isLastDayOfMonth","month","getMonth","year","subDays","PropTypes","arrayOf","number","isRequired","Chart","data","unit","basic","deluxe","total","maxDomain","Math","max","makeChartProps","color","interpolation","style","stroke","domain","y","padding","left","right","bottom","top","invertAxis","label","dependentAxis","tickFormat","ea","axisLabel","getCurrent","arr","getLast","getAvg","round","reduce","sum","curr","StatsBlock","num","className","defaultProps","Stats","React","useState","showAvg","setShowAvg","comparisonFunc","type","onClick","p","WEEK","MONTH","YEAR","App","setUnit","showChart","setShowChart","basicRaw","deluxeRaw","totalRaw","getClass","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3776fd8.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { isLastDayOfMonth, subDays } from 'date-fns';\n\nexport const BASIC_PRICE = 5;\nexport const DELUXE_PRICE = 6;\n\nexport const titleCase = str => str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n\n// Creates arrays for weekly, monthly, yearly revenue.\n// Most recent revenue is at the beginning of the array.\nexport const getRevenue = (rawCupcakeData, price = 1, today = new Date()) => {\n  let weekCount = 0;\n  let currDay = today;\n\n  return rawCupcakeData.reduceRight(\n    (acc, dailyCupcakes) => {\n      // Week totals (rolling full week starting with today)\n      if (weekCount > 6) {\n        acc.week.push(0);\n        weekCount = 0;\n      }\n      acc.week[acc.week.length - 1] += dailyCupcakes * price;\n      weekCount++;\n\n      // Month and year totals, starts at current day of the month\n      if (isLastDayOfMonth(currDay)) {\n        acc.month.push(0);\n        if (currDay.getMonth() === 11) {\n          acc.year.push(0);\n        }\n      }\n      acc.month[acc.month.length - 1] += dailyCupcakes * price;\n      acc.year[acc.year.length - 1] += dailyCupcakes * price;\n\n      currDay = subDays(currDay, 1);\n      return acc;\n    },\n    {\n      week: [0],\n      month: [0],\n      year: [0],\n    }\n  );\n};\n\nexport const dataShape = {\n  basic: PropTypes.arrayOf(PropTypes.number).isRequired,\n  deluxe: PropTypes.arrayOf(PropTypes.number).isRequired,\n  total: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { VictoryChart, VictoryLine, VictoryAxis } from 'victory';\nimport { titleCase, dataShape } from './utils';\n\nfunction Chart({ data, unit }) {\n  const { basic, deluxe, total } = data;\n  const maxDomain = Math.max(...total) * 1.1;\n\n  const makeChartProps = color => ({\n    interpolation: 'natural',\n    style: { data: { stroke: color } },\n  });\n\n  return (\n    <VictoryChart\n      domain={{ y: [0, maxDomain] }}\n      padding={{ left: 60, right: 50, bottom: 50, top: 20 }}\n    >\n      <VictoryAxis invertAxis label={`${titleCase(unit)}s in the past`} />\n      <VictoryAxis\n        dependentAxis\n        tickFormat={ea => (ea > 1000 ? `${ea / 1000}k` : ea)}\n        style={{ axisLabel: { padding: 40 } }}\n        label=\"Total Cupcakes\"\n      />\n      <VictoryLine {...makeChartProps('lightblue')} data={basic} />\n      <VictoryLine {...makeChartProps('cornflowerblue')} data={deluxe} />\n      <VictoryLine {...makeChartProps('darkmagenta')} data={total} />\n    </VictoryChart>\n  );\n}\n\nChart.propTypes = {\n  data: PropTypes.shape(dataShape).isRequired,\n  unit: PropTypes.string.isRequired,\n};\n\nexport default Chart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BASIC_PRICE, DELUXE_PRICE, titleCase, dataShape } from './utils';\nimport './App.css';\n\n// Most recent revenue is at the beginning of the array.\nconst getCurrent = arr => arr[0];\nconst getLast = arr => arr[1];\n\n// Current week/month/year will drag avg down, so exclude it.\nconst getAvg = arr =>\n  Math.round(arr.slice(1).reduce((sum, curr) => sum + curr, 0) / (arr.length - 1));\n\nfunction Stats({ data, unit }) {\n  const [showAvg, setShowAvg] = React.useState(true);\n  const { basic, deluxe, total } = data;\n\n  const label = titleCase(unit);\n\n  const comparisonFunc = showAvg ? getAvg : getLast;\n\n  return (\n    <>\n      <div className=\"App-stats\">\n        <section>\n          <h3>{showAvg ? `${label}ly Average` : `Last ${label}`}</h3>\n          <StatsBlock num={comparisonFunc(basic)} price={BASIC_PRICE} label=\"Basic cupcakes\" />\n          <StatsBlock num={comparisonFunc(deluxe)} price={DELUXE_PRICE} label=\"Deluxe cupcakes\" />\n          <StatsBlock num={comparisonFunc(total)} label=\"Total revenue\" />\n        </section>\n        <section>\n          <h3>This {label}</h3>\n          <StatsBlock num={getCurrent(basic)} price={BASIC_PRICE} label=\"Basic cupcakes\" />\n          <StatsBlock num={getCurrent(deluxe)} price={DELUXE_PRICE} label=\"Deluxe cupcakes\" />\n          <StatsBlock num={getCurrent(total)} label=\"Total revenue\" />\n        </section>\n      </div>\n      <button type=\"button\" className=\"text\" onClick={() => setShowAvg(p => !p)}>\n        Compare to {showAvg ? `last ${unit}` : `${unit}ly average`}\n      </button>\n    </>\n  );\n}\n\nStats.propTypes = {\n  data: PropTypes.shape(dataShape).isRequired,\n  unit: PropTypes.string.isRequired,\n};\n\nfunction StatsBlock({ num, price, label }) {\n  return (\n    <div className=\"App-stats--block\">\n      <p>{label}:</p>\n      <div className=\"App-stats--container\">\n        {price ? (\n          <div>\n            <h2>{Math.round(num / price)}</h2> <h4 className=\"App-stats--revenue\">$({num})</h4>\n          </div>\n        ) : (\n          <h2>${num}</h2>\n        )}\n      </div>\n    </div>\n  );\n}\n\nStatsBlock.propTypes = {\n  num: PropTypes.number.isRequired,\n  price: PropTypes.number,\n  label: PropTypes.string.isRequired,\n};\n\nStatsBlock.defaultProps = {\n  price: null,\n};\n\nexport default Stats;\n","import React from 'react';\nimport Chart from './Chart';\nimport Stats from './Stats';\nimport { BASIC_PRICE, DELUXE_PRICE, getRevenue } from './utils';\nimport './App.css';\n\nimport basicRaw from './resources/basic.json';\nimport deluxeRaw from './resources/deluxe.json';\nimport totalRaw from './resources/total.json';\n\nconst WEEK = 'week';\nconst MONTH = 'month';\nconst YEAR = 'year';\n\nfunction App() {\n  const [unit, setUnit] = React.useState(WEEK);\n  const [showChart, setShowChart] = React.useState(false);\n\n  const basic = getRevenue(basicRaw, BASIC_PRICE)[unit];\n  const deluxe = getRevenue(deluxeRaw, DELUXE_PRICE)[unit];\n  const total = getRevenue(totalRaw)[unit];\n\n  const data = { basic, deluxe, total };\n\n  const getClass = type => (type === unit ? 'active' : '');\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Matilda&apos;s Cupcakes</h1>\n        <div className=\"App-buttons\">\n          <button type=\"button\" className={getClass(WEEK)} onClick={() => setUnit(WEEK)}>\n            Weekly\n          </button>\n          <button type=\"button\" className={getClass(MONTH)} onClick={() => setUnit(MONTH)}>\n            Monthly\n          </button>\n          <button type=\"button\" className={getClass(YEAR)} onClick={() => setUnit(YEAR)}>\n            Yearly\n          </button>\n        </div>\n        <button type=\"button\" className=\"text\" onClick={() => setShowChart(p => !p)}>\n          {showChart ? 'See stats' : 'See chart'}\n        </button>\n        <div className=\"App-chart\">\n          {showChart ? <Chart data={data} unit={unit} /> : <Stats data={data} unit={unit} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './week-01/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}