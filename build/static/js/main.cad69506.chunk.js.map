{"version":3,"sources":["week-01/utils.js","week-01/App.js","week-01/serviceWorker.js","index.js"],"names":["getRevenueInTime","dailyCookies","price","daysInTimeUnit","currentTimeUnit","reduceRight","weeklyRev","push","length","reverse","WEEK","MONTH","YEAR","unitMap","Chart","data","basic","deluxe","total","maxDomain","Math","max","makeChartProps","color","x","y","interpolation","style","stroke","domain","padding","left","right","bottom","label","dependentAxis","tickFormat","ea","axisLabel","StatsBlock","num","className","Stats","days","React","useState","seeAvg","setSeeAvg","getCurrent","arr","unit","getComparison","round","slice","reduce","sum","curr","onClick","p","toLowerCase","App","setDays","showChart","setShowChart","basicRaw","deluxeRaw","totalRaw","getClass","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cad69506.chunk.js","sourcesContent":["export const convert = (data, price = 1) => data.map((ea, i) => ({ day: i, total: ea * price }));\nexport const getRevenueInTime = (dailyCookies, price = 1, daysInTimeUnit = 7) => {\n  let currentTimeUnit = 0;\n  return dailyCookies\n    .reduceRight(\n      (weeklyRev, dailyCookies) => {\n        if (currentTimeUnit > daysInTimeUnit - 1) {\n          weeklyRev.push(0);\n          currentTimeUnit = 0;\n        }\n        weeklyRev[weeklyRev.length - 1] += dailyCookies * price;\n        currentTimeUnit++;\n\n        return weeklyRev;\n      },\n      [0]\n    )\n    .reverse();\n};\n\nexport const getWeeklyRev = (dailyCookies, price) => getRevenueInTime(dailyCookies, price, 7);\nexport const getMonthlyRev = (dailyCookies, price) => getRevenueInTime(dailyCookies, price, 30);\nexport const getYearlyRev = (dailyCookies, price) => getRevenueInTime(dailyCookies, price, 365);\n","import React from 'react';\nimport './App.css';\nimport {\n  VictoryChart,\n  VictoryLine,\n  VictoryAxis,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n} from 'victory';\nimport { convert, getWeeklyRev, getRevenueInTime } from './utils';\n\nimport basicRaw from './resources/basic.json';\nimport deluxeRaw from './resources/deluxe.json';\nimport totalRaw from './resources/total.json';\n\nconst WEEK = 7;\nconst MONTH = 30;\nconst YEAR = 365;\n\nconst unitMap = {\n  [WEEK]: 'Week',\n  [MONTH]: 'Month',\n  [YEAR]: 'Year',\n};\n\nconst Chart = ({ data }) => {\n  const { basic, deluxe, total } = data;\n  const maxDomain = Math.max(...total) * 1.1;\n\n  const makeChartProps = color => ({\n    x: 'day',\n    y: 'total',\n    interpolation: 'natural',\n    style: { data: { stroke: color } },\n  });\n\n  return (\n    <VictoryChart domain={{ y: [0, maxDomain] }} padding={{ left: 60, right: 50, bottom: 50 }}>\n      <VictoryAxis label=\"Day\" />\n      <VictoryAxis\n        dependentAxis\n        tickFormat={ea => (ea > 1000 ? `${ea / 1000}k` : ea)}\n        style={{ axisLabel: { padding: 40 } }}\n        label=\"Total Cupcakes\"\n      />\n      <VictoryLine {...makeChartProps('lightgreen')} data={basic} />\n      <VictoryLine {...makeChartProps('lightseagreen')} data={deluxe} />\n      <VictoryLine {...makeChartProps('darkmagenta')} data={total} />\n    </VictoryChart>\n  );\n};\n\nconst StatsBlock = ({ num, label }) => {\n  return (\n    <div className=\"App-stats--block\">\n      <p>{label}:</p>\n      <h2>{num}</h2>\n    </div>\n  );\n};\n\nconst Stats = ({ data, days }) => {\n  const [seeAvg, setSeeAvg] = React.useState(true);\n  const { basic, deluxe, total } = data;\n  const getCurrent = arr => arr[arr.length - 1];\n  const getLast = arr => arr[arr.length - 2];\n  const getAvg = arr =>\n    Math.round(\n      arr.slice(0, arr.length - 1).reduce((sum, curr) => sum + curr, 0) / (arr.length - 1)\n    );\n  const unit = unitMap[days];\n\n  const getComparison = seeAvg ? getAvg : getLast;\n\n  return (\n    <div>\n      <div className=\"App-stats\">\n        <section>\n          <h3>{seeAvg ? `${unit}ly Average` : `Last ${unit}`}</h3>\n          <StatsBlock num={Math.round(getComparison(basic) / 5)} label={'Basic cupcakes'} />\n          <StatsBlock num={Math.round(getComparison(deluxe) / 6)} label={'Deluxe cupcakes'} />\n          <StatsBlock num={getComparison(total)} label={'Total revenue'} />\n        </section>\n        <section>\n          <h3>This {unitMap[days]}</h3>\n          <StatsBlock num={Math.round(getCurrent(basic)) / 5} label={'Basic cupcakes'} />\n          <StatsBlock num={Math.round(getCurrent(deluxe)) / 6} label={'Deluxe cupcakes'} />\n          <StatsBlock num={getCurrent(total)} label={'Total revenue'} />\n        </section>\n      </div>\n      <button className=\"text\" onClick={() => setSeeAvg(p => !p)}>\n        Compare to{' '}\n        {seeAvg\n          ? `last ${unitMap[days].toLowerCase()}`\n          : `${unitMap[days].toLowerCase()}ly average`}\n      </button>\n    </div>\n  );\n};\n\nfunction App() {\n  const [days, setDays] = React.useState(WEEK);\n  const [showChart, setShowChart] = React.useState(false);\n\n  const basic = getRevenueInTime(basicRaw, 5, days);\n  const deluxe = getRevenueInTime(deluxeRaw, 6, days);\n  const total = getRevenueInTime(totalRaw, 1, days);\n\n  const data = { basic, deluxe, total };\n\n  const getClass = type => (type === days ? 'active' : '');\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Matilda's Cupcakes</h1>\n        <div className=\"App-buttons\">\n          <button className={getClass(WEEK)} onClick={() => setDays(WEEK)}>\n            Weekly\n          </button>\n          <button className={getClass(MONTH)} onClick={() => setDays(MONTH)}>\n            Monthly\n          </button>\n          <button className={getClass(YEAR)} onClick={() => setDays(YEAR)}>\n            Yearly\n          </button>\n        </div>\n        <button className=\"text\" onClick={() => setShowChart(p => !p)}>\n          {showChart ? 'See stats' : 'See chart'}\n        </button>\n        <div className=\"App-chart\">\n          {showChart ? <Chart data={data} /> : <Stats data={data} days={days} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './week-01/App';\nimport * as serviceWorker from './week-01/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}